{"ts":1377315312978,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"setgame.viewModel.LeaderboardVM = (function () {\r\n    var self = this;\r\n\r\n    self.todaysGames = ko.observableArray();\r\n    self.fastestGames = ko.observableArray();\r\n    self.averageGames = ko.observableArray();\r\n    self.last30Days = ko.observableArray();\r\n\r\n    self.leaderBoardTab = ko.observable('todays');\r\n    self.leaderNav = function (tab) {\r\n        $(\".leader-nav\").removeClass('active');\r\n        $('#leader-' + tab).parent().addClass('active');\r\n        self.leaderBoardTab(tab);\r\n    };\r\n\r\n    self.getAllGames = function () {\r\n        $.ajax({            \r\n            url: 'api/Game/GetAllGames',\r\n            dataType: 'json',\r\n            async: false,\r\n            success: function (games) {\r\n                setgame.viewModel.allGames(games);\r\n                self.todaysGames(getTodays());\r\n                self.fastestGames(getFastest());\r\n                self.averageGames(getAverage());\r\n                self.last30Days(getLast30DayAverage());\r\n                ninja();\r\n            }\r\n        });\r\n    };\r\n\r\n    function getTodays() {\r\n        var array = setgame.viewModel.allGames().filter(function (game) {\r\n            return game.Seed === setgame.viewModel.seed();\r\n        }).sort(function (a, b) {\r\n            return a.Score - b.Score\r\n        });\r\n\r\n        return formatGames(array);\r\n    }\r\n\r\n    function getFastest() {\r\n        var array = setgame.viewModel.allGames().sort(function (a, b) {\r\n            return a.Score - b.Score\r\n        });\r\n\r\n        return formatGames(array);\r\n    }\r\n\r\n    function getLast30DayAverage() {\r\n\r\n        var dictionary = [];\r\n        var averages = [];\r\n\r\n        var games = setgame.viewModel.allGames().filter(function (game) { \r\n            return new Date(game.DatePlayed) > new Date(new Date() - 2592000000);\r\n        });\r\n\r\n        $.each(games, function (i, game) {\r\n            dictionary[game.UserName] = dictionary[game.UserName] == null\r\n                ? game.Score\r\n                : dictionary[game.UserName] + \",\" + game.Score;\r\n        });\r\n\r\n        for (var i in dictionary) {\r\n            if (dictionary.hasOwnProperty(i)) {\r\n                var times = dictionary[i].toString().split(',');\r\n                var username = i;\r\n\r\n                var sum = 0.0;\r\n                $.each(times, function (j, time) {\r\n                    sum += parseFloat(time);\r\n                });\r\n\r\n                var average = sum / times.length;\r\n\r\n\r\n                averages.push({\r\n                    UserName: username,\r\n                    Score: average,\r\n                    GamesPlayed: times.length\r\n                });\r\n            }\r\n        } // End for loop\r\n\r\n        averages.sort(function (a, b) {\r\n            return parseFloat(a.Score) - parseFloat(b.Score);\r\n        });\r\n\r\n        return formatGames(averages);\r\n    }\r\n\r\n\r\n\r\n    function getAverage() {\r\n        var dictionary = [];\r\n        var averages = [];\r\n\r\n        $.each(setgame.viewModel.allGames(), function (i, game) {\r\n            dictionary[game.UserName] = dictionary[game.UserName] == null\r\n                ? game.Score\r\n                : dictionary[game.UserName] + \",\" + game.Score;\r\n        });\r\n\r\n        for (var i in dictionary) {\r\n            if (dictionary.hasOwnProperty(i)) {\r\n                var times = dictionary[i].toString().split(',');\r\n                var username = i;\r\n\r\n                var sum = 0.0;\r\n                $.each(times, function (j, time) {\r\n                    sum += parseFloat(time);\r\n                });\r\n\r\n                var average = sum / times.length;\r\n\r\n\r\n                averages.push({\r\n                    UserName: username,\r\n                    Score: average,\r\n                    GamesPlayed: times.length\r\n                });\r\n            }\r\n        } // End for loop\r\n\r\n        averages.sort(function (a, b) {\r\n            return parseFloat(a.Score) - parseFloat(b.Score);\r\n        });\r\n\r\n        return formatGames(averages);\r\n    }\r\n\r\n\r\n\r\n    function formatGames(games) {\r\n        var formattedGames = [];\r\n        $.each(games, function (i, game) {\r\n\r\n            formattedGames.push({\r\n                UserName: game.UserName,\r\n                Score: game.Score != null ? formatScore(game.Score) : null,\r\n                DatePlayed: game.DatePlayed != null ? formatDate(game.DatePlayed) : null,\r\n                GamesPlayed: game.GamesPlayed != null ? game.GamesPlayed : null\r\n            });\r\n        });\r\n\r\n        return formattedGames;\r\n    }\r\n\r\n    function formatDate(date) {\r\n        return prettyDate(new Date(date).toISOString());\r\n    }\r\n\r\n    function formatScore(score) {\r\n\r\n        var result = '';\r\n\r\n        if (Math.floor(score / 60) > 0)\r\n            result += (Math.floor(score / 60) + 'm')\r\n        if (Math.floor(score / 60) > 0 && (score % 60) > 0)\r\n            result += ' '\r\n        if ((score % 60) > 0)\r\n            result += (Math.floor(score % 60) + 's')\r\n\r\n        return result;\r\n    }\r\n\r\n    function ninja() {\r\n        $('.ninja-row').hover(\r\n            function () {\r\n                $(this).children('.ninja-col').animate({ color: '#333333' }, 200);\r\n            },\r\n            function () {\r\n                $(this).children('.ninja-col').animate({ color: 'transparent' }, 200);\r\n            });\r\n    }\r\n\r\n    return self;\r\n\r\n}());"]],"start1":0,"start2":0,"length1":0,"length2":5287}]],"length":5287}
